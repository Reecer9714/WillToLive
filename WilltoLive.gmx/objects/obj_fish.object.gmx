<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fish</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.8;
image_alpha = 0;
range = 64+irandom(48)
dir = irandom(359)
spd = choose(0.1,2,3)
colliding = false
motion_set(dir,spd)
//slight random size scale
initSize = 1 + random_range(-0.5,0.15);
image_xscale = initSize;
image_yscale = image_xscale;

//Tween
targetAlpha = image_alpha;
targetSize = image_xscale;

//States
enum State{
    idle,
    attracted,
    scared,
    collide
}
state = State.idle

//Going under
alarm[0]=30+irandom(20)

//Change Direction/speed
alarm[1]=15+irandom(20)
alarm[2]=15+irandom(20)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards Bobber
if instance_exists(obj_bobber) &amp;&amp; distance_to_object(obj_bobber)&lt;=range{
    spd = 2
    var moddir = point_direction(x,y,obj_bobber.x,obj_bobber.y);
    dir = lerp(dir, moddir, 0.6);
    //move_towards_point(obj_bobber.x,obj_bobber.y,min(2,point_distance(x,y,obj_bobber.x,obj_bobber.y)))
    alarm[4]=5+irandom(20)
    //image_angle = direction
}else{
    alarm[4]= -1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speed Change
if !colliding{
    spd = choose(0.1,2,3)
    //motion_set(dir,spd)
}
alarm[2]=20+irandom(30)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Direction Change
if !colliding {
dir = irandom(359)
//image_angle = dir
//motion_set(dir,spd)
}
alarm[1]=15+irandom(20)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Appear/Disapear
//targetAlpha
if image_alpha = 0 {
    //Surface
    targetAlpha = 1;
    targetSize = initSize;
    spd = 1;
    alarm[0]=70+irandom(30);
}else{
    //Dive
    targetAlpha = 0;
    targetSize = initSize * 0.8;
    spd = 1;
    alarm[0]=70+irandom(30);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fish AI

//Island avoid
if scr_tile_distance(x,y,"sand",128) &lt;= 64 || scr_tile_distance(x,y,"grass",128) &lt;= 64{
    if scr_tile_meeting(x,y,"sand") || scr_tile_meeting(x,y,"grass"){
        var island = scr_tile_position(x,y);
    }else{
        var island = scr_tile_nearest(x,y,"sand",16);
    }
    var dirSand = point_direction(island[0],island[1],x,y);
    var dirIsland = point_direction(room_width/2,room_width/2,x,y);
    var moddir = lerp(dirSand, dirIsland, 0.1);
    dir = lerp(dir, moddir, 0.95);
    spd = 2;
}else{

//Fish Schooling
if(distance_to_object(obj_fish) &lt; range * 3 &amp;&amp; distance_to_object(obj_fish) &gt; range * 0.5){
    var near = instance_nearest(x,y,obj_fish);
    var moddir = near.dir
    dir = lerp(dir, moddir, 0.05);
        moddir = point_direction(x,y,near.x,near.y);
    dir = lerp(dir, moddir, 0.05);
}

//Flee Sharks
if distance_to_object(obj_shark)&lt;=range{
    var shark = instance_nearest(x,y,obj_shark);
    spd = 3;
    var moddir = point_direction(shark.x,shark.y,x,y);
    dir = lerp(dir, moddir, 0.6);
}

//Flee Human
if distance_to_object(obj_player)&lt;=range &amp;&amp; obj_player.speed != 0 &amp;&amp; obj_player.swim{
    spd = 3;
    var moddir = point_direction(obj_player.x,obj_player.y,x,y);
    dir = lerp(dir, moddir, 0.6);
}

}

//Getting Caught
if instance_exists(obj_bobber) &amp;&amp; obj_bobber.hooked == false{
    if place_meeting(x,y,obj_bobber){
        spd = 0
        obj_bobber.hooked = true
    }else
    if distance_to_object(obj_bobber)&lt;=range{
        if alarm[4]== -1{
            alarm[4]=5+irandom(20)
        }
    }   
}

update_motion();
smooth_rotate(15);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Visuals for Alarm[0]
if(image_alpha != targetAlpha){
    image_alpha += (targetAlpha - image_alpha) * 0.25;
}
if(image_xscale != targetSize){
    image_xscale += (targetSize - image_xscale) * 0.2;
    image_yscale = image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
draw_self()

if global.debug {
    draw_circle(x,y,range,true)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
